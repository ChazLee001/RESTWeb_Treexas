This doc contains some useful info,

Here are some useful links about setting up Djanog and mySQL, installing
mySQL will probably be different on different systems
https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-18-04
https://docs.djangoproject.com/en/2.1/intro/tutorial01/
https://docs.djangoproject.com/en/2.1/topics/db/models/
https://docs.djangoproject.com/en/2.1/intro/tutorial03/

Here are some useful links about google appengine
when in the plant_app/plants/ directory use the command
$gcloud app deploy 
to deploy the current app
https://cloud.google.com/python/django/flexible-environment
https://console.cloud.google.com/sql/instances?project=plantdatabase-51026&folder&organizationId
https://console.cloud.google.com/iam-admin/iam?_ga=2.164996607.-1746248119.1550011468&project=plantdatabase-51026&folder=&organizationId=

To run on a local machine you first need to 
1) set up a cloud SQL local proxy
	a )$./cloud_sql_proxy -instances="plantdatabase-51026:us-central1:mysql-plant-database"=tcp:3306
	b) if this doesn't work, mysqld is probably using port 3306 run $sudo /etc/init.d/mysql stop
	c) try a) again
2) run migrations
	$python manage.py makemigrations
	$python manage.py makemigrations plantsite
	$python manage.py migrate
3) $python manage.py runserver
4) After you run step 3 successfully, you shouldn't have to run step 1) 2) until the next time you start editing

To deploy you'll need to
1) Change STATIC_URL in settings.py to 'https....' (the rest is in a comment above the current STATIC_URL)
2) $python manage.py collectstatic
3) $gsutil rsync -R static/ gs://plantbucket2/static        (this Synchronizes our local static files with our cloud bucket static files)
4) $gcloud app deploy

Commands:

find processes running on ports
$netstat -ntlp

kill them 
sudo kill -p <PID>

-------------------------------------------------------------------------
Django:

create new project
django-admin startproject <project_name>

>create new app
python manage.py startapp <app_name>
then add appname to INSTALLED_APPS in settings.py
then run
python manage.py migrate

run test server
$python manage.py runserver <serverip>:8000
	-<serverip>:8000 is optional, if not specified, app with run on localhost:8000

Path function is passed four arguments 2 required - route and view
2 optional kwargs and name
route - string that contains a URL pattern
view - when django finds a matching pattern, it calls the specified
	view function with an HttpRequest object as the first 
	argument and any captures values from the route as keyword args
kwargs -other parguments as a dict
name - naming your url lets you refer to it unambiguously from anywhere in Django,
	lets you make global changes to the URL patterns while only touching a 
	single file

-------------------------------------------------------------------------
MySQL (don't do this anymore because we're using cloud SQL)

install it and add security
$sudo apt update
$sudo apt install mysql-server
$sudo mysql_secure_installation

command line admin client
$mysqladmin

start sql from command line
mysql -u root -p

show current databases
mysql> SHOW DATABASES;

create database
mysql> CREATE DATABASE <database_name>;

create user and grant them all privileges
mysql> CREATE USER 'sammy'@'localhost' IDENTIFIED BY 'password';
mysql> GRANT ALL PRIVILEGES ON *.* TO 'sammy'@'localhost' WITH GRANT OPTION;

we will use mysqlclient, which is a Python 3 database connector libraary compatible with Django

start mysql.service again
sudo systemctl start mysql

restart mySQL
$systemctl daemon-reload
$systemctl restart mysql
