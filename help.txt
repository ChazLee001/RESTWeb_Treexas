This doc contains some useful info,

to open up app you need to have python3.6, mySQL,
and a virtual environment (which protects your machine from any 
changes to environmental variables you might make, I included one with plantvenv)
-once you have mySQL installed, create a database called 'plant_data' with the
user 'user1' who has password 'Blackalfredo1!', Django uses this info to interact
with the database
-you must also edit /etc/mysql/my.cnf to add a new client with the previous info (lookup the proper syntax)
-activate the virtual environment with $source plantvenv/bin/activate (exit using $deactivate when you're done)
-run the app with $python plant_app/manage.py runserver
-navigate to localhost:8000 to use the website

Here are some useful links about setting up Djanog and mySQL, installing
mySQL will probably be different on different systems
https://www.digitalocean.com/community/tutorials/how-to-install-mysql-on-ubuntu-18-04
https://docs.djangoproject.com/en/2.1/intro/tutorial01/
https://docs.djangoproject.com/en/2.1/topics/db/models/
https://docs.djangoproject.com/en/2.1/intro/tutorial03/




Commands:

find processes running on ports
$netstat -ntlp


-------------------------------------------------------------------------
Django:

create new project
django-admin startproject <project_name>

>create new app
python manage.py startapp <app_name>
then add appname to INSTALLED_APPS in settings.py
then run
python manage.py migrate

run test server
$python manage.py runserver <serverip>:8000
	-<serverip>:8000 is optional, if not specified, app with run on localhost:8000

Path function is passed four arguments 2 required - route and view
2 optional kwargs and name
route - string that contains a URL pattern
view - when django finds a matching pattern, it calls the specified
	view function with an HttpRequest object as the first 
	argument and any captures values from the route as keyword args
kwargs -other parguments as a dict
name - naming your url lets you refer to it unambiguously from anywhere in Django,
	lets you make global changes to the URL patterns while only touching a 
	single file

-------------------------------------------------------------------------
MySQL

install it and add security
$sudo apt update
$sudo apt install mysql-server
$sudo mysql_secure_installation

command line admin client
$mysqladmin

start sql from command line
mysql -u root -p

show current databases
mysql> SHOW DATABASES;

create database
mysql> CREATE DATABASE <database_name>;

create user and grant them all privileges
mysql> CREATE USER 'sammy'@'localhost' IDENTIFIED BY 'password';
mysql> GRANT ALL PRIVILEGES ON *.* TO 'sammy'@'localhost' WITH GRANT OPTION;

we will use mysqlclient, which is a Python 3 database connector libraary compatible with Django

start mysql.service again
sudo systemctl start mysql

restart mySQL
$systemctl daemon-reload
$systemctl restart mysql
